# EMOJI BOT v1.1.2 (BETA 03)

# ADDITIONAL:
# Bot name is attached to all the pack titles
# Checking subscription on all the channels in array when: EVERY HANDLER IS CALLED (COMMENTED)

# --------------------------- –ó–ê–í–ò–°–ò–ú–û–°–¢–ò --------------------------- #

from aiogram import Bot, Dispatcher, types, F, BaseMiddleware
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, InputMediaPhoto, InputMediaVideo
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from PIL import Image, UnidentifiedImageError
from dotenv import load_dotenv
import asyncio
import os
import requests
import re
import uuid
import subprocess
import asyncpg
import logging

# ----------------------- –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê –ò –ë–î ----------------------- #

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

load_dotenv()

API_TOKEN = os.getenv('API_TOKEN')
TELEGRAM_API_URL = f'https://api.telegram.org/bot{API_TOKEN}'
TELEGRAM_FILE_URL = f"https://api.telegram.org/file/bot{API_TOKEN}"
FFMPEG_PATH = 'ffmpeg'  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ffmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class StickerPackForm(StatesGroup):
    waiting_for_pack_name = State()
    waiting_for_short_name = State()
    waiting_for_sticker = State()
    waiting_for_pack_selection = State()
    waiting_for_sticker_action = State()
    adding_sticker = State()
    removing_sticker = State()
    set_thumbnail = State()
    renaming_pack = State()
    confirming_deletion = State()
    converting_stickers = State()

class EmojiPackForm(StatesGroup):
    waiting_for_pack_name = State()
    waiting_for_short_name = State()
    waiting_for_sticker = State()
    waiting_for_pack_selection = State()
    waiting_for_sticker_action = State()
    adding_sticker = State()
    deleting_emoji = State()
    renaming_pack = State()
    confirming_deletion = State()

class CloneStickerPackStates(StatesGroup):
    waiting_for_stickerpack_link = State()
    waiting_for_new_pack_name = State()
    waiting_for_new_pack_title = State()
    selecting_existing_pack = State()

class CloneEmojiPackStates(StatesGroup):
    waiting_for_pack_link = State()
    waiting_for_pack_name = State()
    waiting_for_short_name = State()
    waiting_for_sticker = State()

class SubscriptionState(StatesGroup):
    checking_subscription = State()

async def create_db_pool():
    return await asyncpg.create_pool(
        user='–í–ê–®_–Æ–ó–ï–†', # –ï—Å–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ç–æ postgres —Å—Ç–∞–≤—å—Ç–µ
        password='–í–ê–®_–ü–ê–†–û–õ–¨',
        database='–ù–ê–ó–í–ê–ù–ò–ï_–ë–î',
        host='localhost'
    )

db_pool = None

# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
CHANNELS = [
    "@wholeshoes"
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –∏ —Ç–∞–π–º–µ—Ä–æ–≤ –ø–æ –∏—Ö media_group_id
media_group_storage = {}
media_group_timers = {}
media_group_processing_messages = {}

# –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
WAIT_TIME = 2

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
check_subscription_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ]
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
main_menu_buttons = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å ‚ú® –ø—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏", callback_data="create_emojipack")],
        [InlineKeyboardButton(text="üåÑ –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫", callback_data="create_stickerpack")],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç–∏–∫–µ—Ä—ã –∏ —ç–º–æ–¥–∑–∏", callback_data="clone")],
        [InlineKeyboardButton(text="üìÇ –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –ø–∞–∫–æ–≤", callback_data="list")]
    ]
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="/menu", description="üè† –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
        BotCommand(command="/add", description="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä"),
        BotCommand(command="/list", description="‚ò∞ –°–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤"),
        BotCommand(command="/clone", description="‚àû –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–∞–∫"),
        BotCommand(command="/delete", description="‚úñ –£–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä"),
        BotCommand(command="/help", description="‚ùì –ü–æ–º–æ—â—å"),
        BotCommand(command="/language", description="üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")
    ]
    await bot.set_my_commands(commands)


# ------------------------ –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ------------------------- #

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
# async def is_user_subscribed(user_id):
#     for channel in CHANNELS:
#         member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
#         if member.status not in ["member", "administrator", "creator"]:
#             return False
#     return True

# class SubscriptionMiddleware(BaseMiddleware):
#     async def __call__(self, handler, event, data):
#         logging.info("Middleware –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è!")  # –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–∞ Middleware

#         global db_pool
#         state: FSMContext = data['state']
#         user_id = None

#         # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—ã—Ç–∏–π —Å from_user
#         if isinstance(event, (types.Message, types.CallbackQuery)):
#             user_id = event.from_user.id
#             logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")  # –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ user_id

#         if user_id:
#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#             async with db_pool.acquire() as connection:
#                 user = await connection.fetchrow('SELECT * FROM users WHERE user_id = $1', user_id)
#                 logging.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î: {user}")

#                 if user:
#                     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
#                     if await is_user_subscribed(user_id):
#                         logging.info("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
#                         await connection.execute('UPDATE users SET subscription_status = TRUE WHERE user_id = $1', user_id)
#                         await state.clear()
#                         return await handler(event, data)
#                     else:
#                         logging.info("–ü–æ–¥–ø–∏—Å–∫–∞ –ù–ï –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
#                         await connection.execute('UPDATE users SET subscription_status = FALSE WHERE user_id = $1', user_id)
#                         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
#                         channels_list = "\n".join([f"- {channel}" for channel in CHANNELS])
#                         if isinstance(event, types.Message):
#                             await event.answer(
#                                 f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞:\n{channels_list}\n"
#                                 f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
#                                 reply_markup=check_subscription_button
#                             )
#                         elif isinstance(event, types.CallbackQuery):
#                             await event.message.answer(
#                                 f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞:\n{channels_list}\n"
#                                 f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
#                                 reply_markup=check_subscription_button
#                             )
#                         await state.set_state(SubscriptionState.checking_subscription)
#                         return


#         # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏–ª–∏ user_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
#         return await handler(event, data)

# # –î–æ–±–∞–≤–ª—è–µ–º Middleware
# dp.update.middleware(SubscriptionMiddleware())

# ---------------------- –ê–ö–¢–£–ê–õ–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• ------------------------ #
# ---------------------------- –•–ï–ù–î–õ–ï–†–´ ----------------------------- #

@dp.callback_query(lambda c: c.data == "list")
async def handle_my_stickers(callback_query: types.CallbackQuery, state: FSMContext):
    await my_stickers(callback_query, state)

@dp.callback_query(lambda c: c.data == "show_emoji_packs")
async def handle_show_emoji_packs(callback_query: types.CallbackQuery, state: FSMContext):
    await show_emoji_packs(callback_query, state)

@dp.callback_query(lambda c: c.data == "show_regular_packs")
async def handle_show_regular_packs(callback_query: types.CallbackQuery, state: FSMContext):
    await show_regular_packs(callback_query, state)

@dp.callback_query(lambda c: c.data == "menu")
async def handle_show_menu(callback_query: types.CallbackQuery):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –æ—Ç–≤–µ—Ç, —á—Ç–æ –∏ –≤ –∫–æ–º–∞–Ω–¥–µ /menu
    await menu_command(callback_query.message)
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

@dp.callback_query(lambda c: c.data == "remove_sticker")
async def start_removing_sticker(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    pack_name = data.get('pack_name')
    short_name = data.get('short_name')

    if not short_name or not pack_name:
        await callback_query.answer("–û—à–∏–±–∫–∞: —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
        return

    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫
    pack_link = f"https://t.me/addstickers/{short_name}"

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∞", callback_data="menu")]
    ])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–±–æ—Ä–µ
    response_message = (
        f"–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –Ω–∞–±–æ—Ä–∞ [{pack_name}]({pack_link})\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Ç–∏–∫–µ—Ä –∏–∑ —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    await callback_query.message.edit_text(response_message, reply_markup=keyboard, parse_mode="Markdown")
    await state.set_state(StickerPackForm.removing_sticker)
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
@dp.callback_query(lambda c: c.data == "rename_pack")
async def start_rename_pack(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    pack_name = data.get('pack_name')
    short_name = data.get('short_name')

    if not short_name or not pack_name:
        await callback_query.answer("–û—à–∏–±–∫–∞: —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
        return

    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫
    pack_link = f"https://t.me/addstickers/{short_name}"

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∞", callback_data="menu")]
    ])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–∫–µ
    response_message = (
        f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ [{pack_name[:-18]}]({pack_link})\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    await callback_query.message.edit_text(response_message, reply_markup=keyboard, parse_mode="Markdown")
    await state.set_state(StickerPackForm.renaming_pack)
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —ç–º–æ–¥–∑–∏–ø–∞–∫–∞
@dp.callback_query(lambda c: c.data == "rename_emoji_pack")
async def start_rename_pack(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç–º–æ–¥–∑–∏–ø–∞–∫–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    pack_name = data.get('pack_name')
    short_name = data.get('short_name')

    if not short_name or not pack_name:
        await callback_query.answer("–û—à–∏–±–∫–∞: —ç–º–æ–¥–∑–∏–ø–∞–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
        return

    # –°—Å—ã–ª–∫–∞ –Ω–∞ —ç–º–æ–¥–∑–∏–ø–∞–∫
    pack_link = f"https://t.me/addemoji/{short_name}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∞", callback_data="menu")]
    ])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–∫–µ
    response_message = (
        f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ [{pack_name[:-16]}]({pack_link})\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    await callback_query.message.edit_text(response_message, reply_markup=keyboard, parse_mode="Markdown")
    await state.set_state(EmojiPackForm.renaming_pack)
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

# -------------------------- –ö–û–ú–ê–ù–î–´/–ú–ï–ù–Æ --------------------------- #

@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    global db_pool
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "User"

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    async with db_pool.acquire() as connection:
        user = await connection.fetchrow('SELECT * FROM users WHERE user_id = $1', user_id)
        if not user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å subscription_status = False
            await connection.execute('INSERT INTO users (user_id, subscription_status) VALUES ($1, $2)', user_id, False)

    await message.answer(
        f"*–ü—Ä–∏–≤–µ—Ç, {user_name}*\n\n"
        "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–∏ üåü *–ü—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏* –∏ –°—Ç–∏–∫–µ—Ä—ã –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤–∏–¥–µ–æ –∏ GIF\\!\n"
        "–ê —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ —ç–º–æ–¥–∑–∏\\/—Å—Ç–∏–∫–µ—Ä—ã –≤ –æ–¥–∏–Ω –Ω–∞–±–æ—Ä\\!\n"
        "–ï—â—ë –±–æ—Ç —É–º–µ–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏ –≤ –ø—Ä–µ–º–∏—É–º\\-—ç–º–æ–¥–∑–∏\\.\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ /help \\- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
        parse_mode="MarkdownV2",
        reply_markup=main_menu_buttons
    )

# –≠–¢–û–¢ –°–¢–ê–†–¢ –° –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï–ú –ü–û–î–ü–ò–°–ö–ò
# @dp.message(Command("start"))
# async def start_command(message: types.Message, state: FSMContext):
#     global db_pool
#     user_id = message.from_user.id
#     user_name = message.from_user.first_name or "User"

#     # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
#     async with db_pool.acquire() as connection:
#         user = await connection.fetchrow('SELECT * FROM users WHERE user_id = $1', user_id)
#         if not user:
#             # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å subscription_status = False
#             await connection.execute('INSERT INTO users (user_id, subscription_status) VALUES ($1, $2)', user_id, False)

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
#     if user and user['subscription_status']:
#         # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
#         await message.answer(
#             f"*–ü—Ä–∏–≤–µ—Ç, {user_name}*\n\n"
#             "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–∏ üåü *–ü—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏* –∏ –°—Ç–∏–∫–µ—Ä—ã –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤–∏–¥–µ–æ –∏ GIF\\!\n"
#             "–ê —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ —ç–º–æ–¥–∑–∏\\/—Å—Ç–∏–∫–µ—Ä—ã –≤ –æ–¥–∏–Ω –Ω–∞–±–æ—Ä\\!\n"
#             "–ï—â—ë –±–æ—Ç —É–º–µ–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏ –≤ –ø—Ä–µ–º–∏—É–º\\-—ç–º–æ–¥–∑–∏\\.\n\n"
#             "–ö–æ–º–∞–Ω–¥–∞ /help \\- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
#             parse_mode="MarkdownV2",
#             reply_markup=main_menu_buttons
#         )
#         await state.clear()
#     else:
#         # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
#         channels_list = "\n".join([f"- {channel}" for channel in CHANNELS])
#         await message.answer(
#             f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞:\n{channels_list}\n"
#             f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
#             reply_markup=check_subscription_button
#         )
#         await state.set_state(SubscriptionState.checking_subscription)

# @dp.callback_query(lambda callback_query: callback_query.data == "check_subscription", StateFilter(SubscriptionState.checking_subscription))
# async def check_subscription_handler(callback_query: types.CallbackQuery, state: FSMContext):
#     global db_pool
#     user_id = callback_query.from_user.id
#     user_name = message.from_user.first_name or "User"

#     # –ó–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
#     is_subscribed = True  # –≠—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∞—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏

#     # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–π —à–∞–±–ª–æ–Ω)
#     for channel in CHANNELS:
#         member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
#         if member.status not in ["member", "administrator", "creator"]:
#             is_subscribed = False
#             break

#     async with db_pool.acquire() as connection:
#         if is_subscribed:
#             # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#             await connection.execute('UPDATE users SET subscription_status = TRUE WHERE user_id = $1', user_id)
#             await callback_query.message.answer(
#                 f"*–ü—Ä–∏–≤–µ—Ç, {user_name}*\n\n"
#                 "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–∏ üåü *–ü—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏* –∏ –°—Ç–∏–∫–µ—Ä—ã –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤–∏–¥–µ–æ –∏ GIF\\!\n"
#                 "–ê —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ —ç–º–æ–¥–∑–∏\\/—Å—Ç–∏–∫–µ—Ä—ã –≤ –æ–¥–∏–Ω –Ω–∞–±–æ—Ä\\!\n"
#                 "–ï—â—ë –±–æ—Ç —É–º–µ–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏ –≤ –ø—Ä–µ–º–∏—É–º\\-—ç–º–æ–¥–∑–∏\\.\n\n"
#                 "–ö–æ–º–∞–Ω–¥–∞ /help \\- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
#                 parse_mode="MarkdownV2",
#                 reply_markup=main_menu_buttons
#             )
#             await state.clear()
#         else:
#             # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#             await callback_query.message.answer(
#                 "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
#                 reply_markup=check_subscription_button
#             )

#     # –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram, —á—Ç–æ callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω
#     await callback_query.answer()

@dp.message(Command("menu"))
@dp.message(Command("clone"))
@dp.message(Command("menu"))
async def menu_command(message: types.Message):
    user_name = message.from_user.first_name or "User"
    await message.answer(
        f"*–ü—Ä–∏–≤–µ—Ç, {user_name}*\n\n"
        "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–∏ üåü *–ü—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏* –∏ –°—Ç–∏–∫–µ—Ä—ã –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤–∏–¥–µ–æ –∏ GIF\\!\n"
        "–ê —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ —ç–º–æ–¥–∑–∏\\/—Å—Ç–∏–∫–µ—Ä—ã –≤ –æ–¥–∏–Ω –Ω–∞–±–æ—Ä\\!\n"
        "–ï—â—ë –±–æ—Ç —É–º–µ–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏ –≤ –ø—Ä–µ–º–∏—É–º\\-—ç–º–æ–¥–∑–∏\\.\n\n"
        "‚ö° –ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã: @EMOJI\\_official \\- —ç–º–æ–¥–∑–∏, @STIKERS\\_official \\- —Å—Ç–∏–∫–µ—Ä—ã\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ /help \\- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
        parse_mode="MarkdownV2",
        reply_markup=main_menu_buttons
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "‚ö° –ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã: @EMOJI\\_official \\- —ç–º–æ–¥–∑–∏, @STIKERS\\_official \\- —Å—Ç–∏–∫–µ—Ä—ã\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "üè† /menu \\- –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é\n"
        "‚ûï /add \\- –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä\n"
        "‚ò∞ /list \\- –°–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤\n"
        "‚àû /clone \\- –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–∞–∫\n"
        "‚úñ /delete \\- –£–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä\n"
        "‚ùì /help \\- –ü–æ–º–æ—â—å\n"
        "üåê /language \\- –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n\n"
        "*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "üÜï /new \\- –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞–∫\n"
        "‚úèÔ∏è /rename \\- –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –Ω–∞–±–æ—Ä\n"
        "üóëÔ∏è /delpack \\- –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫\n\n",
        parse_mode="MarkdownV2"
    )

@dp.message(Command("list"))
@dp.message(Command("add"))
@dp.message(Command("delete"))
@dp.message(Command("delpack"))
@dp.message(Command("rename"))
async def my_stickers(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞—Ö –∏ —ç–º–æ–¥–∑–∏–ø–∞–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with db_pool.acquire() as connection:
        regular_packs = await connection.fetch(
            "SELECT id, pack_name, short_name FROM sticker_packs WHERE user_id = $1 AND set_type = 'regular'",
            user_id
        )
        emoji_packs = await connection.fetch(
            "SELECT id, pack_name, short_name FROM sticker_packs WHERE user_id = $1 AND set_type = 'custom_emoji'",
            user_id
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞–∫–∞—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(regular_packs=regular_packs, emoji_packs=emoji_packs)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å —ç–º–æ–¥–∑–∏–ø–∞–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await show_emoji_packs(message, state)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç–º–æ–¥–∑–∏–ø–∞–∫–∞–º–∏
async def show_emoji_packs(message_or_query, state: FSMContext):
    data = await state.get_data()
    emoji_packs = data.get('emoji_packs', [])

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —ç–º–æ–¥–∑–∏ –∏ —Å—Ç–∏–∫–µ—Ä–∞–º–∏
    switch_buttons = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏", callback_data="show_emoji_packs"),
                InlineKeyboardButton(text="üñº –°—Ç–∏–∫–µ—Ä—ã", callback_data="show_regular_packs")
            ]
        ]
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞–∂–¥—ã–º —ç–º–æ–¥–∑–∏–ø–∞–∫–æ–º
    emoji_pack_buttons = [
        [InlineKeyboardButton(text=f"üåü {pack['pack_name'][:-16]}", callback_data=f"emoji_pack_{pack['id']}")]
        for pack in emoji_packs
    ]

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–º–æ–¥–∑–∏–ø–∞–∫–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    interaction_buttons = [
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π üåü –ü—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏-–ø–∞–∫", callback_data="create_emojipack")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="menu")]
    ]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=switch_buttons.inline_keyboard + emoji_pack_buttons + interaction_buttons
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —ç–º–æ–¥–∑–∏–ø–∞–∫–æ–≤
    response_message = (
        "–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –ø–∞–∫–æ–≤:\n\n"
        f"–£ –í–∞—Å {len(emoji_packs)} –ø—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏ –ø–∞–∫–æ–≤\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–∑–æ–≤ –∏–∑ callback_query
    if isinstance(message_or_query, types.CallbackQuery):
        await message_or_query.message.edit_text(response_message, reply_markup=keyboard)
        await message_or_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    else:
        # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message_or_query.answer(response_message, reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞–º–∏
async def show_regular_packs(message_or_query, state: FSMContext):
    data = await state.get_data()
    regular_packs = data.get('regular_packs', [])

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —ç–º–æ–¥–∑–∏ –∏ —Å—Ç–∏–∫–µ—Ä–∞–º–∏
    switch_buttons = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üåü –ü—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏", callback_data="show_emoji_packs"),
                InlineKeyboardButton(text="‚úÖ –°—Ç–∏–∫–µ—Ä—ã", callback_data="show_regular_packs")
            ]
        ]
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞–∂–¥—ã–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–º
    regular_pack_buttons = [
        [InlineKeyboardButton(text=f"{pack['pack_name'][:-18]}", callback_data=f"pack_{pack['id']}")]
        for pack in regular_packs
    ]

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    interaction_buttons = [
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π üñº –°—Ç–∏–∫–µ—Ä-–ø–∞–∫", callback_data="create_stickerpack")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="menu")]
    ]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=switch_buttons.inline_keyboard + regular_pack_buttons + interaction_buttons
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤
    response_message = (
        "–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä –ø–∞–∫–æ–≤:\n\n"
        f"–£ –í–∞—Å {len(regular_packs)} —Å—Ç–∏–∫–µ—Ä –ø–∞–∫–∞\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å"
    )

    # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ callback_query, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(message_or_query, types.CallbackQuery):
        await message_or_query.message.edit_text(response_message, reply_markup=keyboard)
        await message_or_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    else:
        # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message_or_query.answer(response_message, reply_markup=keyboard)

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ –≤ –ø–∞–∫
@dp.callback_query(lambda c: c.data == "create_stickerpack")
async def add_sticker(callback_query: types.CallbackQuery, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    cancel_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∞", callback_data="menu")]
        ]
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    response_message = (
        "*–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞–∫–∞*\n\n"
        "‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø –ø–∞–∫–∞: —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫\n\n"
        "‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∞–∫–∞"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.edit_text(response_message, reply_markup=cancel_keyboard, parse_mode="Markdown")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–∫–∞
    await state.set_state(StickerPackForm.waiting_for_pack_name)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "create_emojipack")
async def add_emoji(callback_query: types.CallbackQuery, state: FSMContext):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    cancel_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∞", callback_data="menu")]
        ]
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_message = (
        "*–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞–∫–∞*\n\n"
        "‚úÖ *–í—ã–±—Ä–∞–Ω —Ç–∏–ø –ø–∞–∫–∞: –ø—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏-–ø–∞–∫*\n\n"
        "‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∞–∫–∞"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.edit_text(response_message, reply_markup=cancel_keyboard, parse_mode="Markdown")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–∞–∫–∞
    await state.set_state(EmojiPackForm.waiting_for_pack_name)
    await callback_query.answer()

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫
@dp.message(Command("clone_stickerpack"))
async def start_command(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å.")
    await state.set_state(CloneStickerPackStates.waiting_for_stickerpack_link)

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏
@dp.message(Command("clone_emojipack"))
async def start_command(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —ç–º–æ–¥–∑–∏–ø–∞–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å.")
    await state.set_state(EmojiPackForm.waiting_for_pack_link)

# -------------------------- –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–ï -------------------------- #

@dp.callback_query(lambda c: c.data == "clone")
async def start_convert_stickers(callback_query: types.CallbackQuery, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∞", callback_data="menu")]
    ])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    response_message = (
        "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–∫–µ—Ä—ã –≤ –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏, "
        "–∞ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–ø–∏—é —Å—Ç–∏–∫–µ—Ä–æ–≤.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–ª–∏ —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    await callback_query.message.edit_text(response_message, reply_markup=keyboard)
    await state.set_state(StickerPackForm.converting_stickers)
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

@dp.message(StateFilter(StickerPackForm.converting_stickers))
async def handle_pack_link(message: types.Message, state: FSMContext):
    pack_link = message.text.strip()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∞–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ
    if "t.me/addemoji" in pack_link:
        pack_type = "emoji"
        short_name = pack_link.split("addemoji/")[-1]
    elif "t.me/addstickers" in pack_link:
        pack_type = "sticker"
        short_name = pack_link.split("addstickers/")[-1]
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–ª–∏ —ç–º–æ–¥–∑–∏.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(pack_link=pack_link, pack_type=pack_type, short_name=short_name)

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñº –°—Ç–∏–∫–µ—Ä-–ø–∞–∫", callback_data="convert_to_sticker_pack")],
        [InlineKeyboardButton(text="üåü –ü—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏-–ø–∞–∫", callback_data="convert_to_emoji_pack")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–∞–∫—É", callback_data="list")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="menu")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await message.reply(
        f"–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–∞ {short_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–≤–æ–≥–æ –ø–∞–∫–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data in ["convert_to_sticker_pack", "convert_to_emoji_pack"])
async def start_convert(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞–∫–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    pack_type = data.get("pack_type")
    pack_name = data.get("pack_name")
    short_name = data.get("short_name")
    original_pack_link = data.get("pack_link")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–æ–≤–æ–≥–æ –ø–∞–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    new_pack_type = "sticker" if callback_query.data == "convert_to_sticker_pack" else "custom_emoji"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø –ø–∞–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(new_pack_type=new_pack_type)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –∂–∏—Ä–Ω—ã–º
    response_message = (
        "‚úÖ *–°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!*\n\n"
        "–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–∫\n"
        "(—Ç–æ–ª—å–∫–æ *–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã* –∏ *—Ü–∏—Ñ—Ä—ã*, –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞)\n\n"
        "*–ü—Ä–∏–º–µ—Ä*: `link123`"
    )

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await callback_query.message.edit_text(
        response_message,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∞", callback_data="menu")]]
        ),
        parse_mode="Markdown"
    )
    await state.set_state(CloneStickerPackStates.waiting_for_new_pack_name)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "add_to_existing_pack")
async def add_to_existing_pack(callback_query: types.CallbackQuery, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–æ–≤
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="menu")]
        ])
    )
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–∫–æ–≤
    await state.set_state(CloneStickerPackStates.selecting_existing_pack)
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

@dp.message(StateFilter(CloneStickerPackStates.waiting_for_new_pack_name))
async def process_short_name(message: types.Message, state: FSMContext):
    short_name = message.text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    if not re.match(r'^[a-z][a-z0-9_]*$', short_name) or short_name == '–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å':
        response_message = (
            "‚ùå *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞.*\n"
            "–°—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ _–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã_, _—Ü–∏—Ñ—Ä—ã_ –∏ _–Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ_, "
            "–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä—ã.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."
        )
        await message.reply(response_message, parse_mode="Markdown")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    username = re.sub(r'[^a-zA-Z0-9_]', '', message.from_user.username or message.from_user.first_name).lower()
    if not username:
        username = 'user'

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –±–æ—Ç–∞
    bot_info = await bot.get_me()
    bot_name = re.sub(r'[^a-zA-Z0-9_]', '', bot_info.username).lower()

    if short_name == '–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å':
        unique_id = str(uuid.uuid4()).replace('-', '')[:8]
        short_name = f"{username}_pack_{unique_id}_by_{bot_name}".lower()
    else:
        short_name = f"{short_name}_by_{bot_name}"

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ—Ç–∞ –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤
    short_name = short_name[:64]

    await state.update_data(new_short_name=short_name)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
    response_message = (
        "‚úÖ *–°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!*\n\n"
        "‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∞–∫–∞"
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    cancel_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∞", callback_data="menu")]
        ]
    )
    await message.reply(response_message, reply_markup=cancel_keyboard, parse_mode="Markdown")
    await state.set_state(CloneStickerPackStates.waiting_for_new_pack_title)

def process_video_for_sticker(input_path: str, output_path: str):
    """–ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤ (—Ä–∞–∑–º–µ—Ä 512x512)"""
    command = [
        FFMPEG_PATH,
        "-i", input_path,
        "-vf", (
            "scale=512:512:force_original_aspect_ratio=decrease,"
            "pad=512:512:(ow-iw)/2:(oh-ih)/2,"
            "format=rgba,"
            "chromakey=black:0.1:0.0"
        ),
        "-c:v", "libvpx-vp9",
        "-b:v", "512k",
        "-r", "30",
        "-an",
        "-t", "3",
        "-loop", "0",
        output_path
    ]
    subprocess.run(command, check=True)

def process_video_for_emoji(input_path: str, output_path: str):
    """–ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è —ç–º–æ–¥–∑–∏–ø–∞–∫–æ–≤ (—Ä–∞–∑–º–µ—Ä 100x100)"""
    command = [
        FFMPEG_PATH,
        "-i", input_path,
        "-vf", (
            "scale=100:100:force_original_aspect_ratio=decrease,"
            "pad=100:100:(ow-iw)/2:(oh-ih)/2:color=0x00000000,"
            "colorkey=0x000000:0.3:0.1"
        ),
        "-c:v", "libvpx-vp9",
        "-b:v", "256k",
        "-r", "30",
        "-an",
        "-pix_fmt", "yuva420p",
        "-t", "3",
        output_path
    ]
    subprocess.run(command, check=True)

@dp.message(StateFilter(CloneStickerPackStates.waiting_for_new_pack_title))
async def create_new_pack(message: types.Message, state: FSMContext):
    pack_name = message.text.strip() + " @STIKER_official"
    data = await state.get_data()
    user_id = message.from_user.id
    short_name = data.get("new_short_name")
    original_short_name = data.get("short_name")
    new_pack_type = data.get("new_pack_type")
    set_type = ""

    if new_pack_type == "sticker":
        set_type = "regular"
    else:
        set_type = "custom_emoji"

    processing_message = await bot.send_message(chat_id=message.chat.id, text='‚è≥')

    try:
        response = requests.get(f"{TELEGRAM_API_URL}/getStickerSet", params={"name": original_short_name})
        sticker_set = response.json()

        if not sticker_set.get("ok"):
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–±–æ—Ä–µ.")
            return

        stickers = sticker_set["result"]["stickers"]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞/—ç–º–æ–¥–∑–∏
        first_sticker = stickers[0]
        is_animated = first_sticker.get("is_animated", False)
        is_video = first_sticker.get("is_video", False)
        file_id = first_sticker["file_id"]

        file_response = requests.get(f"{TELEGRAM_API_URL}/getFile", params={"file_id": file_id})
        file_path = file_response.json()["result"]["file_path"]
        file_url = f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}"
        file_extension = "tgs" if is_animated else "webm" if is_video else "png"
        temp_path = f"temp_{file_id}.{file_extension}"
        output_path = f"resized_{file_id}.webm"

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        response = requests.get(file_url)
        with open(temp_path, "wb") as file:
            file.write(response.content)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–∞–∫–∞
        if is_video:
            if new_pack_type == "sticker":
                process_video_for_sticker(temp_path, output_path)
            elif new_pack_type == "custom_emoji":
                process_video_for_emoji(temp_path, output_path)
            temp_path = output_path  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É

        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –µ–≥–æ
        if not is_animated and not is_video:
            try:
                with Image.open(temp_path) as img:
                    img = img.convert("RGBA")
                    max_size = 512 if new_pack_type == "sticker" else 100
                    img.thumbnail((max_size, max_size), Image.LANCZOS)
                    new_img = Image.new("RGBA", (max_size, max_size), (0, 0, 0, 0))
                    x_offset = (max_size - img.width) // 2
                    y_offset = (max_size - img.height) // 2
                    new_img.paste(img, (x_offset, y_offset), img)
                    new_img.save(temp_path, "PNG")
            except UnidentifiedImageError:
                await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                return

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞–∫–∞ —Å –ø–µ—Ä–≤—ã–º —Å—Ç–∏–∫–µ—Ä–æ–º/—ç–º–æ–¥–∑–∏
        if new_pack_type == "sticker":
            data = {
                "user_id": user_id,
                "name": short_name,
                "title": pack_name,
                "emojis": first_sticker["emoji"],
                "sticker_type": "regular"
            }
            files = {
                "png_sticker" if not is_animated and not is_video else "tgs_sticker" if is_animated else "webm_sticker": open(temp_path, "rb")
            }
        elif new_pack_type == "custom_emoji":
            data = {
                "user_id": user_id,
                "name": short_name,
                "title": pack_name,
                "emojis": first_sticker["emoji"],
                "sticker_type": "custom_emoji"
            }
            files = {
                "png_sticker" if not is_animated and not is_video else "tgs_sticker" if is_animated else "webm_sticker": open(temp_path, "rb")
            }

        response = requests.post(f"{TELEGRAM_API_URL}/createNewStickerSet", data=data, files=files)

        if response.status_code != 200 or not response.json().get("ok"):
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–∞–∫–∞: {response.json().get('description')}")
            return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Ç–∏–∫–µ—Ä–æ–≤/—ç–º–æ–¥–∑–∏ –≤ –Ω–æ–≤—ã–π –ø–∞–∫
        for sticker in stickers[1:]:
            file_id = sticker["file_id"]
            is_animated = sticker.get("is_animated", False)
            is_video = sticker.get("is_video", False)
            file_response = requests.get(f"{TELEGRAM_API_URL}/getFile", params={"file_id": file_id})
            file_path = file_response.json()["result"]["file_path"]
            file_url = f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}"
            file_extension = "tgs" if is_animated else "webm" if is_video else "png"
            temp_path = f"temp_{file_id}.{file_extension}"
            output_path = f"resized_{file_id}.webm"

            response = requests.get(file_url)
            with open(temp_path, "wb") as file:
                file.write(response.content)

            if is_video:
                if new_pack_type == "sticker":
                    process_video_for_sticker(temp_path, output_path)
                elif new_pack_type == "custom_emoji":
                    process_video_for_emoji(temp_path, output_path)
                temp_path = output_path

            if not is_animated and not is_video:
                try:
                    with Image.open(temp_path) as img:
                        img = img.convert("RGBA")
                        img.thumbnail((max_size, max_size), Image.LANCZOS)
                        new_img = Image.new("RGBA", (max_size, max_size), (0, 0, 0, 0))
                        x_offset = (max_size - img.width) // 2
                        y_offset = (max_size - img.height) // 2
                        new_img.paste(img, (x_offset, y_offset), img)
                        new_img.save(temp_path, "PNG")
                except UnidentifiedImageError:
                    await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ.")
                    continue

            add_sticker_data = {
                "user_id": user_id,
                "name": short_name,
                "emojis": sticker["emoji"]
            }
            add_files_data = {
                "png_sticker" if not is_animated and not is_video else "tgs_sticker" if is_animated else "webm_sticker": open(temp_path, "rb")
            }

            add_response = requests.post(f"{TELEGRAM_API_URL}/addStickerToSet", data=add_sticker_data, files=add_files_data)

            if add_response.status_code != 200 or not add_response.json().get("ok"):
                await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞/—ç–º–æ–¥–∑–∏: {add_response.json().get('description')}")
                return

        pack_link = f"https://t.me/add{'stickers' if new_pack_type == 'sticker' else 'emoji'}/{short_name}"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîó –û–¢–ö–†–´–¢–¨ –ü–ê–ö", url=pack_link)]]
        )
        await message.reply("‚úÖ –ü–∞–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=keyboard)

        async with db_pool.acquire() as connection:
            await connection.execute(
                """
                INSERT INTO sticker_packs (user_id, pack_name, short_name, set_type)
                VALUES ($1, $2, $3, $4)
                """,
                user_id, pack_name, short_name, set_type
            )

    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

    finally:
        if os.path.exists(temp_path):
            os.remove(temp_path)
        if os.path.exists(output_path):
            os.remove(output_path)
        await processing_message.delete()
        await state.clear()

# ----------------------- –§–£–ù–ö–¶–ò–ò –°–¢–ò–ö–ï–†–ü–ê–ö–ê ----------------------- #

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–∫–∞ –∏ –∑–∞–ø—Ä–æ—Å –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏
@dp.message(StateFilter(StickerPackForm.waiting_for_pack_name))
async def process_pack_name(message: types.Message, state: FSMContext):
    await state.update_data(pack_name=message.text)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –∂–∏—Ä–Ω—ã–º
    response_message = (
        "‚úÖ *–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!*\n\n"
        "–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–∫\n"
        "(—Ç–æ–ª—å–∫–æ *–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã* –∏ *—Ü–∏—Ñ—Ä—ã*, –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞)\n\n"
        "*–ü—Ä–∏–º–µ—Ä*: `link123`"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    cancel_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∞", callback_data="menu")]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.reply(response_message, reply_markup=cancel_keyboard, parse_mode="Markdown")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–º–µ–Ω–∏
    await state.set_state(StickerPackForm.waiting_for_short_name)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ short_name –∏ –∑–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–æ–≤
@dp.message(StateFilter(StickerPackForm.waiting_for_short_name))
async def process_short_name(message: types.Message, state: FSMContext):
    short_name = message.text.lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
    if not re.match(r'^[a-z][a-z0-9_]*$', short_name) or short_name == '–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å':
        response_message = (
            "‚ùå *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞.*\n"
            "–°—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ _–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã_, _—Ü–∏—Ñ—Ä—ã_ –∏ _–Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ_, "
            "–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä—ã.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."
        )
        await message.reply(response_message, parse_mode="Markdown")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"
    user_data = await state.get_data()
    username = re.sub(r'[^a-zA-Z0-9_]', '', message.from_user.username or message.from_user.first_name).lower() or 'user'
    bot_info = await bot.get_me()
    bot_name = re.sub(r'[^a-zA-Z0-9_]', '', bot_info.username).lower()

    if short_name == '–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å':
        unique_id = str(uuid.uuid4()).replace('-', '')[:8]
        short_name = f"{username}_pack_{unique_id}_by_{bot_name}".lower()
    else:
        short_name = f"{short_name}_by_{bot_name}"

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏
    short_name = short_name[:64]

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(short_name=short_name)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
    response_message = (
        "‚úÖ *–°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!*\n\n"
        "üìé –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/—Å—Ç–∏–∫–µ—Ä/–≥–∏—Ñ–∫—É/—ç–º–æ–¥–∑–∏/–≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–∞–∫"
    )
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    cancel_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∞", callback_data="menu")]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.reply(response_message, reply_markup=cancel_keyboard, parse_mode="Markdown")
    await state.set_state(StickerPackForm.waiting_for_sticker)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, GIF –∏–ª–∏ –≤–∏–¥–µ–æ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ—Ç–∞
@dp.message(StateFilter(StickerPackForm.waiting_for_sticker), F.content_type.in_(['photo', 'document', 'video', 'animation']))
async def process_sticker(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = message.from_user.id
    pack_name = user_data.get('pack_name') + " @STIKERS_official"
    short_name = user_data.get('short_name')
    set_type = user_data.get('set_type', 'regular')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–µ—Å–æ—á–Ω—ã—Ö —á–∞—Å–æ–≤
    processing_message = await bot.send_message(chat_id=message.chat.id, text='‚è≥')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    temp_path = None
    temp_video_path = None
    temp_webm_path = None

    try:
        sticker_file_path = None
        sticker_file_type = None

        if message.content_type == 'photo':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            photo = message.photo[-1]
            file_info = await bot.get_file(photo.file_id)
            temp_path = os.path.join("temp", f"{uuid.uuid4()}.png")
            await bot.download_file(file_info.file_path, temp_path)

            with Image.open(temp_path) as img:
                img = img.convert("RGBA")
                if img.width < 512 or img.height < 512:
                    img = img.resize((512, 512), Image.LANCZOS)
                img.thumbnail((512, 512))
                img.save(temp_path, format="PNG")

            sticker_file_path = temp_path
            sticker_file_type = 'png_sticker'

        elif message.content_type == 'document':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≤–∫–ª—é—á–∞—è webp
            file_info = await bot.get_file(message.document.file_id)
            mime_type = message.document.mime_type
            temp_path = os.path.join("temp", f"{uuid.uuid4()}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME-—Ç–∏–ø–∞ –¥–ª—è webp
            if mime_type == "image/webp":
                temp_path += ".webp"
            else:
                temp_path += ".png"

            await bot.download_file(file_info.file_path, temp_path)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º webp –≤ png, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –∏ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
            with Image.open(temp_path) as img:
                img = img.convert("RGBA")
                if img.width < 512 or img.height < 512:
                    img = img.resize((512, 512), Image.LANCZOS)
                img.thumbnail((512, 512))
                if mime_type == "image/webp":
                    temp_path = temp_path.replace(".webp", ".png")
                img.save(temp_path, format="PNG")

            sticker_file_path = temp_path
            sticker_file_type = 'png_sticker'

        elif message.content_type in ['video', 'animation']:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –∏–ª–∏ GIF
            file_id = message.video.file_id if message.content_type == 'video' else message.animation.file_id
            file_info = await bot.get_file(file_id)
            temp_video_path = os.path.join("temp", f"{uuid.uuid4()}.mp4")
            temp_webm_path = os.path.join("temp", f"{uuid.uuid4()}.webm")
            await bot.download_file(file_info.file_path, temp_video_path)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ webm —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FFmpeg
            process_video(temp_video_path, temp_webm_path)
            sticker_file_path = temp_webm_path
            sticker_file_type = 'webm_sticker'

        if sticker_file_path:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ —á–µ—Ä–µ–∑ API Telegram
            with open(sticker_file_path, 'rb') as sticker_file:
                files = {
                    sticker_file_type: sticker_file
                }
                data = {
                    'user_id': user_id,
                    'title': pack_name,
                    'name': short_name,
                    'sticker_type': set_type,
                    'emojis': '\U0001F680'
                }
                response = requests.post(f"{TELEGRAM_API_URL}/createNewStickerSet", data=data, files=files)
                if response.status_code == 200:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–∞–∫–µ
                    await state.update_data(pack_name=pack_name, short_name=short_name)
                    await state.set_state(StickerPackForm.adding_sticker)

                    stickerpack_link = f"https://t.me/addstickers/{short_name}"
                    keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫", url=stickerpack_link)],
                            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_sticker")]
                        ]
                    )
                    await message.reply("–°—Ç–∏–∫–µ—Ä–ø–∞–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=keyboard)
                else:
                    await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫: {response.json().get('description')}")

        # –í–Ω—É—Ç—Ä–∏ try –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        async with db_pool.acquire() as connection:
            await connection.execute(
                """
                INSERT INTO sticker_packs (user_id, pack_name, short_name, set_type)
                VALUES ($1, $2, $3, $4)
                """,
                user_id, pack_name, short_name, set_type
            )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if temp_path and os.path.exists(temp_path):
            os.remove(temp_path)
        if temp_video_path and os.path.exists(temp_video_path):
            os.remove(temp_video_path)
        if temp_webm_path and os.path.exists(temp_webm_path):
            os.remove(temp_webm_path)
    except Exception as e:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Å–æ—á–Ω—ã–º–∏ —á–∞—Å–∞–º–∏
        await processing_message.delete()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(StickerPackForm.adding_sticker)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –≤ webm
def process_video(input_path: str, output_path: str):
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .WEBM —Å –∫–æ–¥–µ–∫–æ–º VP9, –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ 512x512 –ø–∏–∫—Å–µ–ª–µ–π
    # –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º —á–µ—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–∞
    command = [
        FFMPEG_PATH,
        "-i", input_path,
        "-vf", (
            "scale=512:512:force_original_aspect_ratio=decrease,"
            "pad=512:512:(ow-iw)/2:(oh-ih)/2,"
            "format=rgba,"
            "chromakey=black:0.1:0.0"
        ),
        "-c:v", "libvpx-vp9",
        "-b:v", "512k",  # –ë–∏—Ç—Ä–µ–π—Ç –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
        "-r", "30",  # –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤
        "-an",  # –£–¥–∞–ª–µ–Ω–∏–µ –∑–≤—É–∫–∞
        "-t", "3",  # –û–±—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –¥–æ 3 —Å–µ–∫—É–Ω–¥
        "-loop", "0",  # –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        output_path
    ]
    subprocess.run(command, check=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
@dp.callback_query(lambda c: c.data.startswith("pack_"))
async def handle_pack_selection(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞–∫–∞
        if callback_query.data.startswith("pack_stats"):
            # –ï—Å–ª–∏ data —Ä–∞–≤–Ω–æ "pack_stats", –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è –∏–∑–≤–ª–µ—á—å pack_id
            await show_pack_stats(callback_query, state)
            return
        
        pack_id = int(callback_query.data.split("_")[1])
    except (ValueError, IndexError):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ pack_id
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–∫–∞.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Å–µ—Ö —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    regular_packs = data.get('regular_packs', [])

    # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫ –ø–æ ID
    selected_pack = next((pack for pack in regular_packs if pack['id'] == pack_id), None)

    if not selected_pack:
        # –ï—Å–ª–∏ –ø–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback_query.answer("–ü–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –ø–∞–∫–∞
    pack_name = selected_pack.get('pack_name')
    short_name = selected_pack.get('short_name')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    if not pack_name or not short_name:
        await callback_query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –ø–∞–∫–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(pack_id=pack_id, pack_name=pack_name, short_name=short_name)

    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫
    pack_link = f"https://t.me/addstickers/{short_name}"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–º
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –û–¢–ö–†–´–¢–¨ –ü–ê–ö", url=pack_link)],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫ –ø–∞–∫—É", callback_data="add_sticker")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–∫", callback_data="rename_pack")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –∏–∑ –ø–∞–∫–∞", callback_data="remove_sticker")],
        [InlineKeyboardButton(text="‚ùó –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –ø–∞–∫", callback_data="delete_pack")],
        [InlineKeyboardButton(text="üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–æ–∫", callback_data="pack_stats")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_regular_packs")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="menu")]
    ])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–∫–µ
    response_message = (
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–æ–º\n\n"
        f"–í—ã–±—Ä–∞–Ω —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫ [{pack_name[:-16]}]({pack_link})\n\n"
        "–í —ç—Ç–æ–º –º–µ–Ω—é –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–±–æ—Ä–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ."
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await callback_query.message.edit_text(response_message, reply_markup=keyboard, parse_mode="Markdown")
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫ –ø–∞–∫—É"
@dp.callback_query(lambda c: c.data == "add_sticker")
async def add_sticker_handler(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–∞–∫–µ
    user_data = await state.get_data()
    pack_name = user_data.get('pack_name')
    short_name = user_data.get('short_name')

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    cancel_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∞", callback_data="menu")]
        ]
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–∞–∫
    pack_link = f"https://t.me/addstickers/{short_name}"
    response_message = (
        f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤/—ç–º–æ–¥–∑–∏ –≤ [{pack_name}]({pack_link})\n\n"
        "üìé –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/—Å—Ç–∏–∫–µ—Ä/–≥–∏—Ñ–∫—É/—ç–º–æ–¥–∑–∏/–≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–∞–∫\n\n"
        "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è tg: –º–∞–∫—Å–∏–º—É–º 200 —ç–º–æ–¥–∑–∏, 50 –≥–∏—Ñ-—Å—Ç–∏–∫–µ—Ä–æ–≤, –∏ 120 - –æ–±—ã—á–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º –ø–∞–∫–µ"
    )

    await callback_query.message.edit_text(response_message, reply_markup=cancel_keyboard, parse_mode="Markdown")
    await state.set_state(StickerPackForm.adding_sticker)
    await callback_query.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
@dp.callback_query(lambda c: c.data == "delete_pack")
async def confirm_delete_sticker_pack(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ
    data = await state.get_data()
    pack_name = data.get('pack_name')

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùó –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data="confirm_delete")],
        [InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∞", callback_data="menu")]
    ])

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
    response_message = (
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫: {pack_name}\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ', —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–∞–∫, –∏–ª–∏ '–û—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback_query.message.edit_text(response_message, reply_markup=keyboard)
    await state.set_state(StickerPackForm.confirming_deletion)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
@dp.callback_query(lambda c: c.data == "confirm_delete", StateFilter(StickerPackForm.confirming_deletion))
async def delete_sticker_pack(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ
    data = await state.get_data()
    short_name = data.get('short_name')
    pack_id = data.get('pack_id')

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with db_pool.acquire() as connection:
        await connection.execute(
            "DELETE FROM sticker_packs WHERE id = $1",
            pack_id
        )

    # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —á–µ—Ä–µ–∑ API Telegram
    try:
        response = requests.post(
            f"https://api.telegram.org/bot{API_TOKEN}/deleteStickerSet",
            json={"name": short_name}
        )

        if response.status_code == 200 and response.json().get('ok'):
            await callback_query.message.reply("–°—Ç–∏–∫–µ—Ä–ø–∞–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ API.")
        else:
            error_message = response.json().get("description", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —á–µ—Ä–µ–∑ API.")
            await callback_query.message.reply(f"–°—Ç–∏–∫–µ—Ä–ø–∞–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ API: {error_message}")
    except Exception as e:
        await callback_query.message.reply(f"–°—Ç–∏–∫–µ—Ä–ø–∞–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ API: {e}")

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –ø–∞—á–∫–æ–π
@dp.message(StateFilter(StickerPackForm.adding_sticker), F.content_type.in_(['photo', 'document', 'video', 'animation']))
async def add_stickers_to_set(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = message.from_user.id
    pack_name = user_data.get('pack_name')
    short_name = user_data.get('short_name')

    media_group_id = message.media_group_id
    processing_message = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

    if media_group_id and media_group_id not in media_group_processing_messages:
        processing_message = await bot.send_message(chat_id=message.chat.id, text='‚è≥')
        media_group_processing_messages[media_group_id] = processing_message

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∞
    async def process_media_group():
        messages = media_group_storage.pop(media_group_id, [])
        media_group_timers.pop(media_group_id, None)
        media_files = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for msg in messages:
            file_info, temp_path, sticker_file_type = await process_message_file(msg)
            if file_info and temp_path:
                media_files.append((file_info, temp_path, sticker_file_type))

        total_added = 0  # –°—á—ë—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫
            for file_info, temp_path, sticker_file_type in media_files:
                with open(temp_path, 'rb') as sticker_file:
                    files = {sticker_file_type: sticker_file}
                    data = {
                        'user_id': user_id,
                        'title': pack_name,
                        'name': short_name,
                        'emojis': '\U0001F680'
                    }
                    response = requests.post(f"{TELEGRAM_API_URL}/addStickerToSet", data=data, files=files)
                    if response.status_code == 200 and response.json().get('ok'):
                        total_added += 1
                    else:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä: {response.json().get('description')}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
            stickerpack_link = f"https://t.me/addstickers/{short_name}"
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîó –û–¢–ö–†–´–¢–¨ –ü–ê–ö", url=stickerpack_link)],
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_sticker")]
                ]
            )
            await processing_message.edit_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {total_added} —Å—Ç–∏–∫–µ—Ä–æ–≤!", reply_markup=keyboard)

        except Exception as e:
            await processing_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for _, temp_path, _ in media_files:
                if temp_path and os.path.exists(temp_path):
                    os.remove(temp_path)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
            await state.update_data(pack_name=pack_name, short_name=short_name)
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(StickerPackForm.adding_sticker)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
    if media_group_id:
        if media_group_id not in media_group_storage:
            media_group_storage[media_group_id] = []
        media_group_storage[media_group_id].append(message)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
        if media_group_id in media_group_timers:
            media_group_timers[media_group_id].cancel()  # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä
        loop = asyncio.get_event_loop()
        media_group_timers[media_group_id] = loop.call_later(WAIT_TIME, lambda: asyncio.create_task(process_media_group()))

    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        file_info, temp_path, sticker_file_type = await process_message_file(message)
        if file_info and temp_path:
            try:
                with open(temp_path, 'rb') as sticker_file:
                    files = {sticker_file_type: sticker_file}
                    data = {
                        'user_id': user_id,
                        'title': pack_name,
                        'name': short_name,
                        'emojis': '\U0001F680'
                    }
                    response = requests.post(f"{TELEGRAM_API_URL}/addStickerToSet", data=data, files=files)
                    if response.status_code == 200 and response.json().get('ok'):
                        stickerpack_link = f"https://t.me/addstickers/{short_name}"
                        keyboard = InlineKeyboardMarkup(
                            inline_keyboard=[
                                [InlineKeyboardButton(text="üîó –û–¢–ö–†–´–¢–¨ –ü–ê–ö", url=stickerpack_link)],
                                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_sticker")]
                            ]
                        )
                        # –ö–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                        await bot.send_message(chat_id=message.chat.id, text="‚úÖ –°—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=keyboard)
                    else:
                        await bot.send_message(chat_id=message.chat.id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä")
            except Exception as e:
                await bot.send_message(chat_id=message.chat.id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä")
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞: {e}")
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if temp_path and os.path.exists(temp_path):
                    os.remove(temp_path)

                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
                await state.update_data(pack_name=pack_name, short_name=short_name)
                await state.set_state(StickerPackForm.adding_sticker)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
async def process_message_file(msg):
    try:
        temp_path = None
        sticker_file_type = None

        if msg.content_type == 'photo':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            photo = msg.photo[-1]
            file_info = await bot.get_file(photo.file_id)
            temp_path = os.path.join("temp", f"{uuid.uuid4()}.png")
            await bot.download_file(file_info.file_path, temp_path)

            with Image.open(temp_path) as img:
                img = img.convert("RGBA")
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 512x512
                if img.width < 512 or img.height < 512:
                    img = img.resize((512, 512), Image.LANCZOS)
                img.thumbnail((512, 512))
                img.save(temp_path, format="PNG")

            sticker_file_path = temp_path
            sticker_file_type = 'png_sticker'

        elif msg.content_type == 'document':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –≤–∫–ª—é—á–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è webp
            file_info = await bot.get_file(msg.document.file_id)
            mime_type = msg.document.mime_type
            temp_path = os.path.join("temp", f"{uuid.uuid4()}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
            if mime_type == "image/webp":
                temp_path += ".webp"
            else:
                temp_path += ".png"

            await bot.download_file(file_info.file_path, temp_path)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º webp –≤ png –∏ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
            with Image.open(temp_path) as img:
                img = img.convert("RGBA")
                if img.width < 512 or img.height < 512:
                    img = img.resize((512, 512), Image.LANCZOS)
                img.thumbnail((512, 512))
                temp_path = temp_path.replace(".webp", ".png")  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å —Å .png
                img.save(temp_path, format="PNG")

            sticker_file_path = temp_path
            sticker_file_type = 'png_sticker'

        elif msg.content_type in ['video', 'animation']:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –∏–ª–∏ GIF
            file_id = msg.video.file_id if msg.content_type == 'video' else msg.animation.file_id
            file_info = await bot.get_file(file_id)
            temp_video_path = os.path.join("temp", f"{uuid.uuid4()}.mp4")
            temp_webm_path = os.path.join("temp", f"{uuid.uuid4()}.webm")
            await bot.download_file(file_info.file_path, temp_video_path)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ webm —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FFmpeg
            process_video(temp_video_path, temp_webm_path)
            temp_path = temp_webm_path
            sticker_file_type = 'webm_sticker'

        return file_info, temp_path, sticker_file_type
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None, None, None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞
@dp.message(StateFilter(StickerPackForm.removing_sticker), F.content_type.in_(['sticker']))
async def remove_sticker(message: types.Message, state: FSMContext):
    sticker_file_id = message.sticker.file_id

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –∏–∑ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
        response = requests.post(f"{TELEGRAM_API_URL}/deleteStickerFromSet", data={'sticker': sticker_file_id})
        
        if response.status_code == 200 and response.json().get('ok'):
            await message.reply("–°—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ø–∞–∫–∞!")
        else:
            error_message = response.json().get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞: {error_message}")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞: {response.text}")

    except Exception as e:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä: {e}")
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –æ–±–ª–æ–∂–∫–∏
@dp.message(StateFilter(StickerPackForm.set_thumbnail), F.content_type.in_(['photo', 'document', 'video', 'animation']))
async def set_thumbnail(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = message.from_user.id
    short_name = user_data.get('short_name')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    processing_message = await bot.send_message(chat_id=message.chat.id, text='‚è≥')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    temp_path = None
    temp_video_path = None
    temp_webm_path = None
    temp_gif_path = None

    try:
        temp_thumbnail_path = None
        thumbnail_format = None

        if message.content_type == 'photo':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
            photo = message.photo[-1]
            file_info = await bot.get_file(photo.file_id)
            if file_info and file_info.file_path:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ file_info –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–µ–Ω
                temp_path = os.path.join("temp", f"{uuid.uuid4()}.webp")
                await bot.download_file(file_info.file_path, temp_path)
            else:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")

        elif message.content_type == 'document' and message.document.mime_type.startswith('image'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            file_info = await bot.get_file(message.document.file_id)
            if file_info and file_info.file_path:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ file_info –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–µ–Ω
                temp_path = os.path.join("temp", f"{uuid.uuid4()}.webp")
                await bot.download_file(file_info.file_path, temp_path)
            else:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")

        if temp_path:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with Image.open(temp_path) as img:
                img = img.convert("RGBA")  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–∞

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –∏ —É–º–µ–Ω—å—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ 100x100
                original_width, original_height = img.size
                scale = min(100 / original_width, 100 / original_height)
                new_width = int(original_width * scale)
                new_height = int(original_height * scale)
                img = img.resize((new_width, new_height), Image.LANCZOS)

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–æ–ª—Å—Ç 100x100 —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
                new_img = Image.new("RGBA", (100, 100), (0, 0, 0, 0))
                x_offset = (100 - new_width) // 2
                y_offset = (100 - new_height) // 2
                new_img.paste(img, (x_offset, y_offset), img)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                new_img.save(temp_path, format="WEBP")

            temp_thumbnail_path = temp_path
            thumbnail_format = 'static'

        if message.content_type == 'video':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
            file_id = message.video.file_id
            file_info = await bot.get_file(file_id)

            if file_info and file_info.file_path:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ file_info –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–µ–Ω
                temp_video_path = os.path.join("temp", f"{uuid.uuid4()}.mp4")
                temp_webm_path = os.path.join("temp", f"{uuid.uuid4()}.webm")
                await bot.download_file(file_info.file_path, temp_video_path)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ webm —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FFmpeg
                try:
                    process_emoji_video(temp_video_path, temp_webm_path)
                    temp_thumbnail_path = temp_webm_path
                    thumbnail_format = 'video'
                except subprocess.CalledProcessError as e:
                    raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")

        elif message.content_type == 'animation':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ GIF
            file_id = message.animation.file_id
            file_info = await bot.get_file(file_id)

            if file_info and file_info.file_path:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ file_info –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–µ–Ω
                temp_gif_path = os.path.join("temp", f"{uuid.uuid4()}.gif")
                temp_webm_path = os.path.join("temp", f"{uuid.uuid4()}.webm")
                await bot.download_file(file_info.file_path, temp_gif_path)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è GIF –≤ webm —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FFmpeg
                try:
                    process_emoji_video(temp_gif_path, temp_webm_path)
                    temp_thumbnail_path = temp_webm_path
                    thumbnail_format = 'video'
                except subprocess.CalledProcessError as e:
                    raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GIF: {e}")

        if temp_thumbnail_path:
            with open(temp_thumbnail_path, 'rb') as thumbnail_file:
                files = {
                    'thumbnail': thumbnail_file
                }
                data = {
                    'name': short_name,
                    'user_id': user_id,
                    'format': thumbnail_format  # –ò—Å–ø–æ–ª—å–∑—É–µ–º "static" –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π .WEBP
                }
                response = requests.post(f"{TELEGRAM_API_URL}/setStickerSetThumbnail", data=data, files=files)

                if response.status_code == 200 and response.json().get("ok"):
                    await message.reply("–û–±–ª–æ–∂–∫–∞ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                else:
                    await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–±–ª–æ–∂–∫—É: {response.json().get('description')}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if temp_thumbnail_path and os.path.exists(temp_thumbnail_path):
            os.remove(temp_thumbnail_path)
        if temp_path and os.path.exists(temp_path):
            os.remove(temp_path)
        if temp_video_path and os.path.exists(temp_video_path):
            os.remove(temp_video_path)
        if temp_webm_path and os.path.exists(temp_webm_path):
            os.remove(temp_webm_path)
        if temp_gif_path and os.path.exists(temp_gif_path):
            os.remove(temp_gif_path)

    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        await processing_message.delete()
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@dp.message(StateFilter(StickerPackForm.renaming_pack))
async def rename_pack(message: types.Message, state: FSMContext):
    new_name = message.text.strip() + " @STIKERS_official"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
    if len(new_name) < 3 or len(new_name) > 64:
        await message.reply("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 3 –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    pack_id = data.get('id')
    pack_name = data.get('pack_name')
    short_name = data.get('short_name')

    if not short_name or not pack_name:
        await message.reply("–û—à–∏–±–∫–∞: —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
    try:
        response = requests.post(
            f"https://api.telegram.org/bot{API_TOKEN}/setStickerSetTitle",
            data={
                "name": short_name,
                "title": new_name
            }
        )
        response_data = response.json()

        if response.status_code == 200 and response_data.get('ok'):
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            try:
                async with db_pool.acquire() as connection:
                    await connection.execute(
                        """
                        UPDATE sticker_packs
                        SET pack_name = $1
                        WHERE short_name = $2
                        """,
                        new_name,
                        short_name
                    )
            except Exception as db_error:
                await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_error}")
                return

            # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û–¢–ö–†–´–¢–¨ –ü–ê–ö" –∏ "–í –º–µ–Ω—é"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ÜóÔ∏è –û–¢–ö–†–´–¢–¨ –ü–ê–ö", url=f"https://t.me/addstickers/{short_name}")],
                [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="menu")]
            ])

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏
            response_message = (
                "‚úÖ –ü–∞–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω!\n\n"
                f"{pack_name[:-18]} ‚û°Ô∏è {new_name[:-18]}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await message.reply(response_message, reply_markup=keyboard)
        else:
            error_message = response_data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –ø–∞–∫–∞: {error_message}")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –ø–∞–∫–∞: {response_data}")

    except Exception as e:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫: {e}")
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@dp.callback_query(lambda c: c.data == "pack_stats")
async def show_pack_stats(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ
    data = await state.get_data()
    short_name = data.get('short_name')

    if not short_name:
        await callback_query.answer("–û—à–∏–±–∫–∞: —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    response_message = (
        "üìä –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–º –±–æ—Ç–æ–º @stickers ‚Äî "
        "—Ç–æ–ª—å–∫–æ –æ–Ω –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–æ–∫ –Ω–∞–±–æ—Ä–∞.\n\n"
        "üîç –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±–æ—Ç–∞ @stickers.\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/packstats`.\n"
        "3. –ë–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–∫:\n"
        f"`{short_name}`\n\n"
        "–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∏–∂–µ. "
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
        "MM/DD/YYYY, MM/YYYY, –∏–ª–∏ YYYY."
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="menu")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π "–ó–∞–∫—Ä—ã—Ç—å"
    await callback_query.message.edit_text(
        response_message, 
        reply_markup=keyboard, 
        parse_mode="Markdown"
    )
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ


# ----------------------- –§–£–ù–ö–¶–ò–ò –≠–ú–û–î–ó–ò–ü–ê–ö–ê ----------------------- #

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–∫–∞ –∏ –∑–∞–ø—Ä–æ—Å short_link
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–∫–∞ –∏ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏
@dp.message(StateFilter(EmojiPackForm.waiting_for_pack_name))
async def process_emoji_pack_name(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(pack_name=message.text)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    cancel_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∞", callback_data="menu")]
        ]
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    response_message = (
        "‚úÖ *–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!*\n\n"
        "–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–∫ (—Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞)\n\n"
        "–ü—Ä–∏–º–µ—Ä: `link123`"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.reply(response_message, reply_markup=cancel_keyboard, parse_mode="Markdown")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–º–µ–Ω–∏
    await state.set_state(EmojiPackForm.waiting_for_short_name)

# –ü–æ–ª—É—á–µ–Ω–∏–µ short_link –∏ –∑–∞–ø—Ä–æ—Å —Å—Ç–∏–∫–µ—Ä–∞
# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "Adaptive" –∏ "–û—Ç–º–µ–Ω–∞"
def create_adaptive_keyboard(adaptive_enabled):
    adaptive_text = "Adaptive ‚úÖ" if adaptive_enabled else "Adaptive ‚ùå"
    adaptive_callback_data = "toggle_adaptive"
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=adaptive_text, callback_data=adaptive_callback_data)],
            [InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è short_name
@dp.message(StateFilter(EmojiPackForm.waiting_for_short_name))
async def process_emoji_short_name(message: types.Message, state: FSMContext):
    short_name = message.text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
    if not re.match(r'^[a-z0-9_]+$', short_name) and short_name != '–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å':
        await message.reply("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º short_name
    user_data = await state.get_data()
    username = re.sub(r'[^a-zA-Z0-9_]', '', message.from_user.username or message.from_user.first_name).lower()
    username = username if username else 'user'

    bot_info = await bot.get_me()
    bot_name = re.sub(r'[^a-zA-Z0-9_]', '', bot_info.username).lower()

    if short_name == '–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å':
        unique_id = str(uuid.uuid4()).replace('-', '')[:8]
        short_name = f"{username}_pack_{unique_id}_by_{bot_name}".lower()
    else:
        short_name = f"{short_name}_by_{bot_name}"

    short_name = short_name[:64]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º short_name –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(short_name=short_name, adaptive_enabled=False)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    adaptive_keyboard = create_adaptive_keyboard(adaptive_enabled=False)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await message.reply(
        "–°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ\n\n"
        "üìé –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/—Å—Ç–∏–∫–µ—Ä/–≥–∏—Ñ–∫—É/—ç–º–æ–¥–∑–∏/–≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–∞–∫.\n\n"
        "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è tg: –º–∞–∫—Å–∏–º—É–º 200 —ç–º–æ–¥–∑–∏ –≤ –Ω–∞–±–æ—Ä–µ –∏ 120 –≤ –æ–±—ã—á–Ω–æ–º –Ω–∞–±–æ—Ä–µ —Å—Ç–∏–∫–µ—Ä–æ–≤.",
        reply_markup=adaptive_keyboard
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞
    await state.set_state(EmojiPackForm.waiting_for_sticker)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Adaptive"
@dp.callback_query(lambda c: c.data == "toggle_adaptive")
async def handle_adaptive_button(callback_query: types.CallbackQuery, state: FSMContext):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º
    user_data = await state.get_data()
    adaptive_enabled = not user_data.get("adaptive_enabled", False)
    await state.update_data(adaptive_enabled=adaptive_enabled)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    text_message = (
        "–°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ\n\n"
        "üìé –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/—Å—Ç–∏–∫–µ—Ä/–≥–∏—Ñ–∫—É/—ç–º–æ–¥–∑–∏/–≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–∞–∫.\n\n"
        "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è tg: –º–∞–∫—Å–∏–º—É–º 200 —ç–º–æ–¥–∑–∏ –≤ –Ω–∞–±–æ—Ä–µ –∏ 120 –≤ –æ–±—ã—á–Ω–æ–º –Ω–∞–±–æ—Ä–µ —Å—Ç–∏–∫–µ—Ä–æ–≤."
    )
    adaptive_keyboard = create_adaptive_keyboard(adaptive_enabled)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.edit_text(text_message, reply_markup=adaptive_keyboard)
    await callback_query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, GIF –∏–ª–∏ –≤–∏–¥–µ–æ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ—Ç–∞
@dp.message(StateFilter(EmojiPackForm.waiting_for_sticker), F.content_type.in_(['photo', 'document', 'video', 'animation']))
async def process_emoji_sticker(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = message.from_user.id
    pack_name = user_data.get('pack_name') + " @EMOJI_official"
    short_name = user_data.get('short_name')
    set_type = user_data.get('set_type', 'custom_emoji')
    adaptive_enabled = user_data.get('adaptive_enabled', False)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º

    needs_repainting = adaptive_enabled

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–µ—Å–æ—á–Ω—ã—Ö —á–∞—Å–æ–≤
    processing_message = await bot.send_message(chat_id=message.chat.id, text='‚è≥')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    temp_path = None
    temp_video_path = None
    temp_webm_path = None
    temp_gif_path = None

    try:
        sticker_file_path = None
        sticker_file_type = None

        if message.content_type == 'photo':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
            photo = message.photo[-1]
            file_info = await bot.get_file(photo.file_id)
            if file_info and file_info.file_path:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ file_info –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–µ–Ω
                temp_path = os.path.join("temp", f"{uuid.uuid4()}.png")
                await bot.download_file(file_info.file_path, temp_path)
            else:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")

        elif message.content_type == 'document' and message.document.mime_type.startswith('image'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            file_info = await bot.get_file(message.document.file_id)
            if file_info and file_info.file_path:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ file_info –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–µ–Ω
                temp_path = os.path.join("temp", f"{uuid.uuid4()}.png")
                await bot.download_file(file_info.file_path, temp_path)
            else:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")

        if temp_path:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with Image.open(temp_path) as img:
                img = img.convert("RGBA")  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–∞

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –∏ —É–º–µ–Ω—å—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ 100x100
                original_width, original_height = img.size
                scale = min(100 / original_width, 100 / original_height)
                new_width = int(original_width * scale)
                new_height = int(original_height * scale)
                img = img.resize((new_width, new_height), Image.LANCZOS)

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–æ–ª—Å—Ç 100x100 —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
                new_img = Image.new("RGBA", (100, 100), (0, 0, 0, 0))
                x_offset = (100 - new_width) // 2
                y_offset = (100 - new_height) // 2
                new_img.paste(img, (x_offset, y_offset), img)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                new_img.save(temp_path, format="PNG")

            sticker_file_path = temp_path
            sticker_file_type = 'png_sticker'

        if message.content_type == 'video':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
            file_id = message.video.file_id
            file_info = await bot.get_file(file_id)

            if file_info and file_info.file_path:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ file_info –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–µ–Ω
                temp_video_path = os.path.join("temp", f"{uuid.uuid4()}.mp4")
                temp_webm_path = os.path.join("temp", f"{uuid.uuid4()}.webm")
                await bot.download_file(file_info.file_path, temp_video_path)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ webm —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FFmpeg
                try:
                    process_emoji_video(temp_video_path, temp_webm_path)
                    sticker_file_path = temp_webm_path
                    sticker_file_type = 'webm_sticker'
                except subprocess.CalledProcessError as e:
                    raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")

        elif message.content_type == 'animation':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ GIF
            file_id = message.animation.file_id
            file_info = await bot.get_file(file_id)

            if file_info and file_info.file_path:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ file_info –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–µ–Ω
                temp_gif_path = os.path.join("temp", f"{uuid.uuid4()}.gif")
                temp_webm_path = os.path.join("temp", f"{uuid.uuid4()}.webm")
                await bot.download_file(file_info.file_path, temp_gif_path)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è GIF –≤ webm —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FFmpeg
                try:
                    process_emoji_video(temp_gif_path, temp_webm_path)
                    sticker_file_path = temp_webm_path
                    sticker_file_type = 'webm_sticker'
                except subprocess.CalledProcessError as e:
                    raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GIF: {e}")

        if sticker_file_path:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–æ–¥–∑–∏–ø–∞–∫–∞ —á–µ—Ä–µ–∑ API Telegram
            with open(sticker_file_path, 'rb') as sticker_file:
                url = f"{TELEGRAM_API_URL}/createNewStickerSet"

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
                data = {
                    'user_id': user_id,
                    'name': short_name,
                    'title': pack_name,
                    'emojis': '\U0001F680',
                    'sticker_type': set_type,
                    'needs_repainting': needs_repainting
                }
                files = {
                    sticker_file_type: sticker_file
                }

                response = requests.post(url, data=data, files=files)
                if response.status_code == 200:
                    await state.update_data(pack_name=pack_name, short_name=short_name)
                    await state.set_state(EmojiPackForm.adding_sticker)

                    stickerpack_link = f"https://t.me/addemoji/{short_name}"
                    keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üîó –û–¢–ö–†–´–¢–¨ –ü–ê–ö", url=stickerpack_link)],
                            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_esticker")]
                        ]
                    )
                    await message.reply("‚úÖ –≠–º–æ–¥–∑–∏–ø–∞–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=keyboard)
                else:
                    await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–º–æ–¥–∑–∏–ø–∞–∫: {response.json().get('description')}")

        # –í–Ω—É—Ç—Ä–∏ try –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        async with db_pool.acquire() as connection:
            await connection.execute(
                """
                INSERT INTO sticker_packs (user_id, pack_name, short_name, set_type)
                VALUES ($1, $2, $3, $4)
                """,
                user_id, pack_name, short_name, set_type
            )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if temp_path and os.path.exists(temp_path):
            os.remove(temp_path)
        if temp_video_path and os.path.exists(temp_video_path):
            os.remove(temp_video_path)
        if temp_webm_path and os.path.exists(temp_webm_path):
            os.remove(temp_webm_path)
        if temp_gif_path and os.path.exists(temp_gif_path):
            os.remove(temp_gif_path)

    except Exception as e:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–º–æ–¥–∑–∏–ø–∞–∫: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Å–æ—á–Ω—ã–º–∏ —á–∞—Å–∞–º–∏
        await processing_message.delete()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(EmojiPackForm.adding_sticker)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –∏ GIF –≤ webm —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
def process_emoji_video(input_path: str, output_path: str):
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .WEBM —Å –∫–æ–¥–µ–∫–æ–º VP9, –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ 100x100 –ø–∏–∫—Å–µ–ª–µ–π
    command = [
        FFMPEG_PATH,
        "-i", input_path,
        "-vf", "scale=100:100:force_original_aspect_ratio=decrease,pad=100:100:(ow-iw)/2:(oh-ih)/2:color=0x00000000,colorkey=0x000000:0.3:0.1",  # –£–±–∏—Ä–∞–µ–º —á–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç (0x000000) —Å –ø–æ—Ä–æ–≥–∞–º–∏
        "-c:v", "libvpx-vp9",
        "-b:v", "256k",  # –ë–∏—Ç—Ä–µ–π—Ç –¥–ª—è —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ
        "-r", "30",  # –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤
        "-an",  # –£–¥–∞–ª–µ–Ω–∏–µ –∑–≤—É–∫–∞
        "-pix_fmt", "yuva420p",  # –§–æ—Ä–º–∞—Ç –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        "-t", "3",  # –û–±—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –¥–æ 3 —Å–µ–∫—É–Ω–¥
        output_path
    ]
    subprocess.run(command, check=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏–ø–∞–∫–∞
@dp.callback_query(lambda c: c.data.startswith("emoji_pack_"))
async def handle_emoji_pack_selection(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏–ø–∞–∫–∞
        if callback_query.data.startswith("emoji_pack_stats"):
            # –ï—Å–ª–∏ data —Ä–∞–≤–Ω–æ "emoji_pack_stats", –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è –∏–∑–≤–ª–µ—á—å pack_id
            await show_emoji_packs(callback_query, state)
            return
        
        pack_id = int(callback_query.data.split("_")[2])
    except (ValueError, IndexError):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ pack_id
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–∫–∞.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Å–µ—Ö —ç–º–æ–¥–∑–∏–ø–∞–∫–∞—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    emoji_packs = data.get('emoji_packs', [])

    # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–º–æ–¥–∑–∏–ø–∞–∫ –ø–æ ID
    selected_pack = next((pack for pack in emoji_packs if pack['id'] == pack_id), None)

    if not selected_pack:
        # –ï—Å–ª–∏ –ø–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback_query.answer("–≠–º–æ–¥–∑–∏–ø–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –ø–∞–∫–∞
    pack_name = selected_pack.get('pack_name')
    short_name = selected_pack.get('short_name')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    if not pack_name or not short_name:
        await callback_query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —ç–º–æ–¥–∑–∏–ø–∞–∫–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç–º–æ–¥–∑–∏–ø–∞–∫–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(pack_id=pack_id, pack_name=pack_name, short_name=short_name)

    # –°—Å—ã–ª–∫–∞ –Ω–∞ —ç–º–æ–¥–∑–∏–ø–∞–∫
    pack_link = f"https://t.me/addemoji/{short_name}"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏–ø–∞–∫–æ–º
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –û–¢–ö–†–´–¢–¨ –ü–ê–ö", url=pack_link)],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫ –ø–∞–∫—É", callback_data="add_esticker")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–∫", callback_data="rename_emoji_pack")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —ç–º–æ–¥–∑–∏ –∏–∑ –ø–∞–∫–∞", callback_data="delete_emoji")],
        [InlineKeyboardButton(text="‚ùó –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –ø–∞–∫", callback_data="delete_pack")],
        [InlineKeyboardButton(text="üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–æ–∫", callback_data="pack_stats")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_emoji_packs")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="menu")]
    ])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —ç–º–æ–¥–∑–∏–ø–∞–∫–µ
    response_message = (
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏–ø–∞–∫–æ–º\n\n"
        f"–í—ã–±—Ä–∞–Ω —ç–º–æ–¥–∑–∏-–ø–∞–∫ [{pack_name[:-16]}]({pack_link})\n\n"
        "–í —ç—Ç–æ–º –º–µ–Ω—é –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–±–æ—Ä–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ."
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await callback_query.message.edit_text(response_message, reply_markup=keyboard, parse_mode="Markdown")
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
async def delete_emoji_pack(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ
    data = await state.get_data()
    short_name = data.get('short_name')
    pack_id = data.get('pack_id')

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with db_pool.acquire() as connection:
        await connection.execute(
            "DELETE FROM sticker_packs WHERE id = $1",
            pack_id
        )

    # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —á–µ—Ä–µ–∑ API Telegram
    try:
        response = requests.post(
            f"https://api.telegram.org/bot{API_TOKEN}/deleteStickerSet",
            json={"name": short_name}
        )

        if response.status_code == 200 and response.json().get('ok'):
            await callback_query.message.reply("–°—Ç–∏–∫–µ—Ä–ø–∞–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ API.")
        else:
            error_message = response.json().get("description", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —á–µ—Ä–µ–∑ API.")
            await callback_query.message.reply(f"–°—Ç–∏–∫–µ—Ä–ø–∞–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ API: {error_message}")
    except Exception as e:
        await callback_query.message.reply(f"–°—Ç–∏–∫–µ—Ä–ø–∞–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ API: {e}")

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫ –ø–∞–∫—É"
@dp.callback_query(lambda c: c.data == "add_esticker")
async def add_sticker_handler(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–∞–∫–µ
    user_data = await state.get_data()
    pack_name = user_data.get('pack_name')
    short_name = user_data.get('short_name')

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    cancel_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∞", callback_data="menu")]
        ]
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–∞–∫
    pack_link = f"https://t.me/addstickers/{short_name}"
    response_message = (
        f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤/—ç–º–æ–¥–∑–∏ –≤ [{pack_name}]({pack_link})\n\n"
        "üìé –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/—Å—Ç–∏–∫–µ—Ä/–≥–∏—Ñ–∫—É/—ç–º–æ–¥–∑–∏/–≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–∞–∫\n\n"
        "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è tg: –º–∞–∫—Å–∏–º—É–º 200 —ç–º–æ–¥–∑–∏, 50 –≥–∏—Ñ-—Å—Ç–∏–∫–µ—Ä–æ–≤, –∏ 120 - –æ–±—ã—á–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º –ø–∞–∫–µ"
    )

    await callback_query.message.edit_text(response_message, reply_markup=cancel_keyboard, parse_mode="Markdown")
    await state.set_state(EmojiPackForm.adding_sticker)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞
# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞–º–∏
media_queue = []

@dp.message(StateFilter(EmojiPackForm.adding_sticker), F.content_type.in_(['photo', 'document', 'video', 'animation']))
async def add_emoji_to_set(message: types.Message, state: FSMContext):
    global media_queue
    media_queue.append(message)

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Å–æ—á–Ω—ã–µ —á–∞—Å—ã
    if len(media_queue) == 1:
        await bot.send_message(chat_id=message.chat.id, text='‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.')

    # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(process_media_queue(state))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —ç–º–æ–¥–∑–∏–ø–∞–∫–∞
@dp.message(StateFilter(EmojiPackForm.renaming_pack))
async def rename_pack(message: types.Message, state: FSMContext):
    new_name = message.text.strip() + " @EMOJI_official"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
    if len(new_name) < 3 or len(new_name) > 64:
        await message.reply("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 3 –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    pack_id = data.get('id')
    pack_name = data.get('pack_name')
    short_name = data.get('short_name')

    if not short_name or not pack_name:
        await message.reply("–û—à–∏–±–∫–∞: —ç–º–æ–¥–∑–∏–ø–∞–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏–ø–∞–∫–∞
    try:
        response = requests.post(
            f"https://api.telegram.org/bot{API_TOKEN}/setStickerSetTitle",
            data={
                "name": short_name,
                "title": new_name
            }
        )
        response_data = response.json()

        if response.status_code == 200 and response_data.get('ok'):
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            try:
                async with db_pool.acquire() as connection:
                    await connection.execute(
                        """
                        UPDATE sticker_packs
                        SET pack_name = $1
                        WHERE short_name = $2
                        """,
                        new_name,
                        short_name
                    )
            except Exception as db_error:
                await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_error}")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û–¢–ö–†–´–¢–¨ –ü–ê–ö" –∏ "–í –º–µ–Ω—é"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ÜóÔ∏è –û–¢–ö–†–´–¢–¨ –ü–ê–ö", url=f"https://t.me/addemoji/{short_name}")],
                [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="menu")]
            ])

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏
            response_message = (
                "‚úÖ –ü–∞–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω!\n\n"
                f"{pack_name[:-16]} ‚û°Ô∏è {new_name[:-16]}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await message.reply(response_message, reply_markup=keyboard)
        else:
            error_message = response_data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –ø–∞–∫–∞: {error_message}")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –ø–∞–∫–∞: {response_data}")

    except Exception as e:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏–ø–∞–∫: {e}")
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@dp.callback_query(lambda c: c.data == "delete_emoji")
async def start_delete_emoji(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç–º–æ–¥–∑–∏–ø–∞–∫–µ
    data = await state.get_data()
    short_name = data.get("short_name")

    if not short_name:
        await callback_query.answer("–û—à–∏–±–∫–∞: —ç–º–æ–¥–∑–∏-–ø–∞–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–±–æ—Ä–µ —ç–º–æ–¥–∑–∏
    response = requests.get(f"{TELEGRAM_API_URL}/getStickerSet", params={"name": short_name})
    response_data = response.json()

    if not response_data.get("ok"):
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–±–æ—Ä–µ.", show_alert=True)
        return

    stickers = response_data.get("result", {}).get("stickers", [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(stickers=stickers)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∞", callback_data="menu")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await callback_query.message.edit_text(
        "–£–¥–∞–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–±–æ—Ä–∞\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —ç–º–æ–¥–∑–∏ –∏–∑ —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.",
        reply_markup=keyboard
    )
    await state.set_state(EmojiPackForm.deleting_emoji)
    await callback_query.answer()

@dp.message(StateFilter(EmojiPackForm.deleting_emoji))
async def delete_emoji(message: types.Message, state: FSMContext):
    emoji = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    stickers = data.get("stickers", [])

    # –ò—â–µ–º file_id –¥–ª—è —É–¥–∞–ª—è–µ–º–æ–≥–æ —ç–º–æ–¥–∑–∏
    matching_sticker = next((sticker for sticker in stickers if sticker.get("emoji") == emoji), None)

    if not matching_sticker:
        await message.reply("–û—à–∏–±–∫–∞: —ç–º–æ–¥–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞–±–æ—Ä–µ.")
        return

    file_id = matching_sticker.get("file_id")

    if not file_id:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ file_id —ç–º–æ–¥–∑–∏.")
        return

    # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å –ø–æ–º–æ—â—å—é /deleteStickerFromSet
    delete_response = requests.post(
        f"{TELEGRAM_API_URL}/deleteStickerFromSet",
        data={"sticker": file_id}
    )
    delete_response_data = delete_response.json()

    if delete_response_data.get("ok"):
        # –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="menu")]
        ])
        await message.reply("üóëÔ∏è –≠–º–æ–¥–∑–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –Ω–∞–±–æ—Ä–∞.", reply_markup=keyboard)
    else:
        error_message = delete_response_data.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–º–æ–¥–∑–∏: {error_message}")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

async def process_media_queue(state: FSMContext):
    global media_queue

    while media_queue:
        message = media_queue.pop(0)  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏

        user_data = await state.get_data()
        user_id = message.from_user.id
        pack_name = user_data.get('pack_name')
        short_name = user_data.get('short_name')

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        temp_path = None
        temp_video_path = None
        temp_webm_path = None
        temp_gif_path = None

        try:
            sticker_file_path = None
            sticker_file_type = None

            if message.content_type == 'photo':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                photo = message.photo[-1]
                file_info = await bot.get_file(photo.file_id)
                temp_path = os.path.join("temp", f"{uuid.uuid4()}.png")
                await bot.download_file(file_info.file_path, temp_path)

                with Image.open(temp_path) as img:
                    img = img.convert("RGBA")
                    img.thumbnail((100, 100))
                    new_img = Image.new("RGBA", (100, 100), (0, 0, 0, 0))
                    x_offset = (100 - img.width) // 2
                    y_offset = (100 - img.height) // 2
                    new_img.paste(img, (x_offset, y_offset), img)
                    new_img.save(temp_path, format="PNG")

                sticker_file_path = temp_path
                sticker_file_type = 'png_sticker'

            elif message.content_type == 'document' and message.document.mime_type.startswith('image'):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                file_info = await bot.get_file(message.document.file_id)
                temp_path = os.path.join("temp", f"{uuid.uuid4()}.png")
                await bot.download_file(file_info.file_path, temp_path)
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ —Ñ–æ—Ç–æ
                with Image.open(temp_path) as img:
                    img = img.convert("RGBA")
                    img.thumbnail((100, 100))
                    new_img = Image.new("RGBA", (100, 100), (0, 0, 0, 0))
                    x_offset = (100 - img.width) // 2
                    y_offset = (100 - img.height) // 2
                    new_img.paste(img, (x_offset, y_offset), img)
                    new_img.save(temp_path, format="PNG")

                sticker_file_path = temp_path
                sticker_file_type = 'png_sticker'

            elif message.content_type == 'video':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
                file_info = await bot.get_file(message.video.file_id)
                temp_video_path = os.path.join("temp", f"{uuid.uuid4()}.mp4")
                temp_webm_path = os.path.join("temp", f"{uuid.uuid4()}.webm")
                await bot.download_file(file_info.file_path, temp_video_path)
                process_emoji_video(temp_video_path, temp_webm_path)
                sticker_file_path = temp_webm_path
                sticker_file_type = 'webm_sticker'

            elif message.content_type == 'animation':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ (GIF)
                file_info = await bot.get_file(message.animation.file_id)
                temp_gif_path = os.path.join("temp", f"{uuid.uuid4()}.gif")
                temp_webm_path = os.path.join("temp", f"{uuid.uuid4()}.webm")
                await bot.download_file(file_info.file_path, temp_gif_path)
                process_emoji_video(temp_gif_path, temp_webm_path)
                sticker_file_path = temp_webm_path
                sticker_file_type = 'webm_sticker'

            if sticker_file_path:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ —á–µ—Ä–µ–∑ API Telegram
                with open(sticker_file_path, 'rb') as sticker_file:
                    files = {
                        sticker_file_type: sticker_file
                    }
                    data = {
                        'user_id': user_id,
                        'title': pack_name,
                        'name': short_name,
                        'emojis': '\U0001F680'
                    }
                    response = requests.post(f"{TELEGRAM_API_URL}/addStickerToSet", data=data, files=files)
                    if response.status_code == 200:
                        stickerpack_link = f"https://t.me/addemoji/{short_name}"
                        keyboard = InlineKeyboardMarkup(
                            inline_keyboard=[
                                [InlineKeyboardButton(text="üîó –û–¢–ö–†–´–¢–¨ –ü–ê–ö", url=stickerpack_link)],
                                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_sticker")]
                            ]
                        )
                        await message.reply("–°—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=keyboard)
                    else:
                        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä: {response.json().get('description')}")

            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for temp_file in [temp_path, temp_video_path, temp_webm_path, temp_gif_path]:
                if temp_file and os.path.exists(temp_file):
                    os.remove(temp_file)

        except Exception as e:
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä: {e}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(pack_name=pack_name, short_name=short_name)
        await state.set_state(EmojiPackForm.adding_sticker)

# ----------------------- –ó–ê–ü–£–°–ö ----------------------- #

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    global db_pool
    db_pool = await create_db_pool()

    if not os.path.exists("temp"):
        os.makedirs("temp")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å –±–æ—Ç–æ–º
    await bot.delete_webhook(drop_pending_updates=True)
    await set_bot_commands(bot)
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped.")

# ----------------------- INFO ----------------------- #

# MADE BY ANOKHIN MAKSIM FOR @EmojiOfficial_bot
# ALL RIGHTS RESERVED BY MIT. LICENSE